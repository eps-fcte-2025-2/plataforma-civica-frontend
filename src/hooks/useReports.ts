// src/hooks/useReports.ts
import { useState, useCallback } from 'react';
import DenunciaService from '../services/denunciaService';
import {
  CreateReportDTO,
  CreateReportResponse,
  ReportDetail,
  ReportsListResponse,
  UpdateReportStatusDTO,
  UpdateStatusResponse,
  PaginationParams,
  Municipio
} from '../types/api';

export interface UseReportsState {
  loading: boolean;
  error: string | null;
  reports: ReportDetail[];
  pagination: {
    page: number;
    pageSize: number;
    total: number;
    totalPages: number;
  } | null;
}

export const useReports = () => {
  const [state, setState] = useState<UseReportsState>({
    loading: false,
    error: null,
    reports: [],
    pagination: null,
  });

  const setLoading = useCallback((loading: boolean) => {
    setState(prev => ({ ...prev, loading }));
  }, []);

  const setError = useCallback((error: string | null) => {
    setState(prev => ({ ...prev, error }));
  }, []);

  const clearError = useCallback(() => {
    setState(prev => ({ ...prev, error: null }));
  }, []);

  // Buscar den√∫ncias com pagina√ß√£o
  const fetchReports = useCallback(async (params?: PaginationParams) => {
    setLoading(true);
    clearError();
    
    try {
      const response: ReportsListResponse = await DenunciaService.getReports(params);
      setState(prev => ({
        ...prev,
        reports: response.reports as any[], // Convertendo para ReportDetail[]
        pagination: response.pagination,
      }));
      return response;
    } catch (error: any) {
      const errorMessage = error.message || 'Erro ao buscar den√∫ncias';
      setError(errorMessage);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [setLoading, clearError, setError]);

  // Buscar den√∫ncia por ID
  const fetchReportById = useCallback(async (id: string): Promise<ReportDetail> => {
    setLoading(true);
    clearError();
    
    try {
      const report = await DenunciaService.getReportById(id);
      return report;
    } catch (error: any) {
      const errorMessage = error.message || 'Erro ao buscar den√∫ncia';
      setError(errorMessage);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [setLoading, clearError, setError]);

  // Criar nova den√∫ncia
  const createReport = useCallback(async (data: CreateReportDTO): Promise<CreateReportResponse> => {
    setLoading(true);
    clearError();
    
    try {
      // Validar dados antes do envio
      const validationErrors = DenunciaService.validateReportData(data);
      if (validationErrors.length > 0) {
        const errorMessage = `Erros de valida√ß√£o: ${validationErrors.join(', ')}`;
        setError(errorMessage);
        throw new Error(errorMessage);
      }

      const response = await DenunciaService.createReport(data);
      // Atualizar lista ap√≥s cria√ß√£o
      await fetchReports();
      return response;
    } catch (error: any) {
      const errorMessage = error.message || 'Erro ao criar den√∫ncia';
      setError(errorMessage);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [setLoading, clearError, setError, fetchReports]);

  // Atualizar status da den√∫ncia
  const updateReportStatus = useCallback(async (
    id: string, 
    data: UpdateReportStatusDTO
  ): Promise<UpdateStatusResponse> => {
    setLoading(true);
    clearError();
    
    try {
      const response = await DenunciaService.updateReportStatus(id, data);
      // Atualizar lista ap√≥s atualiza√ß√£o
      await fetchReports();
      return response;
    } catch (error: any) {
      const errorMessage = error.message || 'Erro ao atualizar status';
      setError(errorMessage);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [setLoading, clearError, setError, fetchReports]);

  return {
    ...state,
    fetchReports,
    fetchReportById,
    createReport,
    updateReportStatus,
    clearError,
  };
};

// Hook para munic√≠pios
export const useMunicipios = () => {
  const [municipios, setMunicipios] = useState<Municipio[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchMunicipios = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîÑ Iniciando busca de munic√≠pios...');
      const response = await DenunciaService.getMunicipios();
      console.log('‚úÖ Munic√≠pios carregados:', response.length);
      setMunicipios(response);
      return response;
    } catch (error: any) {
      const errorMessage = error.message || 'Erro ao buscar munic√≠pios';
      console.error('‚ùå Erro no hook de munic√≠pios:', error);
      setError(errorMessage);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    municipios,
    loading,
    error,
    fetchMunicipios,
  };
};
