// src/services/denunciaService.ts
import { apiService } from './api';
import {
  CreateReportDTO,
  CreateReportResponse,
  ReportDetail,
  ReportsListResponse,
  UpdateReportStatusDTO,
  UpdateStatusResponse,
  PaginationParams,
  UF
} from '../types/api';

export class DenunciaService {
  private static readonly REPORTS_ENDPOINT = '/v1/reports';
  private static readonly MUNICIPIOS_ENDPOINT = '/v1/reports/municipios';

  /**
   * Criar nova den√∫ncia
   * POST /v1/reports/
   */
  static async createReport(data: CreateReportDTO): Promise<CreateReportResponse> {
    try {
      console.log('üìù Criando nova den√∫ncia:', data);
      const response = await apiService.post<CreateReportResponse>(
        `${this.REPORTS_ENDPOINT}/`,
        data
      );
      console.log('‚úÖ Den√∫ncia criada com sucesso:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao criar den√∫ncia:', error);
      throw error;
    }
  }

  /**
   * Listar todas as den√∫ncias com pagina√ß√£o
   * GET /v1/reports/
   */
  static async getReports(params?: PaginationParams): Promise<ReportsListResponse> {
    try {
      console.log('üìã Buscando den√∫ncias com par√¢metros:', params);
      const response = await apiService.get<ReportsListResponse>(
        `${this.REPORTS_ENDPOINT}/`,
        params as Record<string, unknown>
      );
      console.log('‚úÖ Den√∫ncias encontradas:', response.reports.length);
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao buscar den√∫ncias:', error);
      throw error;
    }
  }

  /**
   * Buscar den√∫ncia por ID
   * GET /v1/reports/{id}
   */
  static async getReportById(id: string): Promise<ReportDetail> {
    try {
      console.log('üîç Buscando den√∫ncia por ID:', id);
      const response = await apiService.get<ReportDetail>(
        `${this.REPORTS_ENDPOINT}/${id}`
      );
      console.log('‚úÖ Den√∫ncia encontrada:', response.id);
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao buscar den√∫ncia por ID:', error);
      throw error;
    }
  }

  /**
   * Atualizar status da den√∫ncia
   * PATCH /v1/reports/{id}
   */
  static async updateReportStatus(
    id: string,
    data: UpdateReportStatusDTO
  ): Promise<UpdateStatusResponse> {
    try {
      console.log('üîÑ Atualizando status da den√∫ncia:', id, data);
      const response = await apiService.patch<UpdateStatusResponse>(
        `${this.REPORTS_ENDPOINT}/${id}`,
        data
      );
      console.log('‚úÖ Status atualizado com sucesso');
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar status:', error);
      throw error;
    }
  }

  /**
   * Buscar UFs brasileiros para o formul√°rio
   */
  static async getUFs(): Promise<UF[]> {
    try {
      console.log('üèõÔ∏è Carregando lista de UFs...');
      
      // Lista est√°tica de UFs brasileiros
      const ufs: UF[] = [
        { sigla: 'AC', nome: 'Acre' },
        { sigla: 'AL', nome: 'Alagoas' },
        { sigla: 'AP', nome: 'Amap√°' },
        { sigla: 'AM', nome: 'Amazonas' },
        { sigla: 'BA', nome: 'Bahia' },
        { sigla: 'CE', nome: 'Cear√°' },
        { sigla: 'DF', nome: 'Distrito Federal' },
        { sigla: 'ES', nome: 'Esp√≠rito Santo' },
        { sigla: 'GO', nome: 'Goi√°s' },
        { sigla: 'MA', nome: 'Maranh√£o' },
        { sigla: 'MT', nome: 'Mato Grosso' },
        { sigla: 'MS', nome: 'Mato Grosso do Sul' },
        { sigla: 'MG', nome: 'Minas Gerais' },
        { sigla: 'PA', nome: 'Par√°' },
        { sigla: 'PB', nome: 'Para√≠ba' },
        { sigla: 'PR', nome: 'Paran√°' },
        { sigla: 'PE', nome: 'Pernambuco' },
        { sigla: 'PI', nome: 'Piau√≠' },
        { sigla: 'RJ', nome: 'Rio de Janeiro' },
        { sigla: 'RN', nome: 'Rio Grande do Norte' },
        { sigla: 'RS', nome: 'Rio Grande do Sul' },
        { sigla: 'RO', nome: 'Rond√¥nia' },
        { sigla: 'RR', nome: 'Roraima' },
        { sigla: 'SC', nome: 'Santa Catarina' },
        { sigla: 'SP', nome: 'S√£o Paulo' },
        { sigla: 'SE', nome: 'Sergipe' },
        { sigla: 'TO', nome: 'Tocantins' }
      ];
      
      console.log('‚úÖ UFs carregados:', ufs.length);
      return ufs;
    } catch (error) {
      console.error('‚ùå Erro ao carregar UFs:', error);
      throw error;
    }
  }

  /**
   * M√©todo utilit√°rio para validar dados antes do envio
   */
  static validateReportData(data: CreateReportDTO): string[] {
    const errors: string[] = [];

    if (!data.tipoDenuncia) {
      errors.push('Tipo de den√∫ncia √© obrigat√≥rio');
    }

    if (!data.descricao || data.descricao.length < 10) {
      errors.push('Descri√ß√£o deve ter pelo menos 10 caracteres');
    }

    if (data.descricao && data.descricao.length > 5000) {
      errors.push('Descri√ß√£o n√£o pode exceder 5000 caracteres');
    }

    if (!data.uf) {
      errors.push('UF √© obrigat√≥rio');
    }

    if (data.uf && !/^[A-Z]{2}$/.test(data.uf)) {
      errors.push('UF deve ter 2 letras mai√∫sculas');
    }

    if (!data.pessoasEnvolvidas || data.pessoasEnvolvidas.length === 0) {
      errors.push('Pelo menos uma pessoa envolvida deve ser informada');
    }

    if (!data.focosManipulacao || data.focosManipulacao.length === 0) {
      errors.push('Pelo menos um foco de manipula√ß√£o deve ser informado');
    }

    // Validar pessoas envolvidas
    data.pessoasEnvolvidas?.forEach((pessoa, index) => {
      if (!pessoa.nomePessoa || pessoa.nomePessoa.trim().length === 0) {
        errors.push(`Nome da pessoa ${index + 1} √© obrigat√≥rio`);
      }
      if (!pessoa.funcaoPessoa || pessoa.funcaoPessoa.trim().length === 0) {
        errors.push(`Fun√ß√£o da pessoa ${index + 1} √© obrigat√≥ria`);
      }
    });

    return errors;
  }

  /**
   * M√©todo utilit√°rio para formatar dados para exibi√ß√£o
   */
  static formatReportForDisplay(report: ReportDetail): ReportDetail & {
  tipoDenunciaFormatted: string;
  dataDenunciaFormatted: string;
  descricaoResumida: string;
} {
    return {
      ...report,
      tipoDenunciaFormatted: report.tipoDenuncia.replace('_', ' ').toLowerCase(),
      dataDenunciaFormatted: new Date(report.dataDenuncia).toLocaleDateString('pt-BR'),
      descricaoResumida: report.descricao.length > 100 
        ? `${report.descricao.substring(0, 100)}...` 
        : report.descricao
    };
  }
}

export default DenunciaService;